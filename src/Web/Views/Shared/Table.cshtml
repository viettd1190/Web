@model Web.Framework.Models.DataTables.DataTablesModel
@using System.Net;
@using Web.Framework.Models.DataTables
@functions
{
string GetUrl(DataUrl dataUrl)
{
    return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
        ? Url.Action(dataUrl.ActionName, dataUrl.ControllerName, dataUrl.RouteValues)
        : !string.IsNullOrEmpty(dataUrl.Url)
        ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}" + (!dataUrl.TrimEnd ? "/" : "")
        : string.Empty;
}
}
<table class="display table table-bordered" width="100%" id="@Model.Name">
    @if (Model.FooterColumns > 0)
    {
        //You need to add the footer before you create the table
        //as DataTables doesn't provide a method for creating a footer at the moment
        <tfoot>
            <tr>
                @for (int i = 0; i < Model.FooterColumns; i++)
                {
                    <td></td>
                }
            </tr>
        </tfoot>
    }
</table>
@{
    //check using MasterCheckBox
    var isMasterCheckBoxUsed = Model.ColumnCollection.Any(x => x.IsMasterCheckBox);
    //Model name for js function names
    var model_name = Model.Name.Replace("-", "_");
}

<script>
    @if (isMasterCheckBoxUsed)
    {
        //selectedIds - This variable will be used on views. It can not be renamed
        <text>
        var selectedIds = [];

        function updateMasterCheckbox() {
            var numChkBoxes = $('#@Model.Name input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
            var numChkBoxesChecked = $('#@Model.Name input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }
        </text>
    }

    function updateTable(tableSelector) {
        $(tableSelector).DataTable().ajax.reload();
        if (@isMasterCheckBoxUsed.ToString().ToLower()) {
            $('#mastercheckbox').attr('checked', false).change();
            selectedIds = [];
        }
    }
    $(document).ready(function () {
      
        var datatable = $('#@Model.Name').DataTable({
             @await Html.PartialAsync("_Table.Definition", Model)
        });

        @if (!string.IsNullOrEmpty(Model.SearchButtonId))
        {
            <text>
            $('#@Model.SearchButtonId').click(function() {
                $('#@Model.Name').DataTable().ajax.reload();
                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });
            </text>
        }
        @if (isMasterCheckBoxUsed)
        {
            <text>
            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            $('#@Model.Name').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                var $check = $(this);
                var checked = jQuery.inArray($check.val(), selectedIds);
                if ($check.is(':checked') == true) {
                    if (checked == -1) {
                        selectedIds.push($check.val());
                    }
                } else if (checked > -1) {
                    selectedIds = $.grep(selectedIds, function (item, index) {
                        return item != $check.val();
                    });
                }
                updateMasterCheckbox();
            });
            </text>
        }
    });
</script>