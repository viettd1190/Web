@model Web.Framework.Models.DataTables.DataTablesModel
@using System.Net;
@using System.Text.Encodings.Web
@using Web.Framework.Models.DataTables

@{
    //the locale which MomentJS should use - the default is en (English).
    var locale = "en";

    //Model name for js function names
    var model_name = Model.Name.Replace("-", "_");
}

@functions
{
string GetUrl(DataUrl dataUrl)
{
    return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
        ? Url.Action(dataUrl.ActionName, dataUrl.ControllerName, dataUrl.RouteValues)
        : !string.IsNullOrEmpty(dataUrl.Url)
        ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}" + (!dataUrl.TrimEnd ? "/" : "")
        : string.Empty;
}
}

@if (!string.IsNullOrEmpty(Model.HeaderCallback))
{
    <text>
        headerCallback: function (tfoot, data, start, end, display) {
        return @(Model.HeaderCallback)(tfoot, data, start, end, display);
        },
    </text>
}
@if (!string.IsNullOrEmpty(Model.FooterCallback))
{
    <text>
        footerCallback: function (tfoot, data, start, end, display) {
        return @(Model.FooterCallback)(tfoot, data, start, end, display);
        },
    </text>
}
@if (Model.Processing)
{
    <text>
        processing: @Model.Processing.ToString().ToLower(),
    </text>
}
@if (Model.ServerSide)
{
    <text>
        serverSide: @Model.ServerSide.ToString().ToLower(),
    </text>
}
@if (Model.Data != null)
{
    <text>
        data: @Html.Raw(Model.Data.ToString()),
    </text>
}
else
{
    <text>
        ajax:
        {
        url: "@Html.Raw(GetUrl(Model.UrlRead))",
        type: "@WebRequestMethods.Http.Post",
        dataType: "json",
        dataSrc: "Data"
        },
    </text>
}
scrollX: true,
info: @Model.Info.ToString().ToLower(),
paging: @Model.Paging.ToString().ToLower(),
pagingType: '@Model.PagingType',
ordering: @Model.Ordering.ToString().ToLower(),
columns: [
@for (int i = 0; i < Model.ColumnCollection.Count; i++)
{
    var column = Model.ColumnCollection[i];
    <text>
        {
        @if (!string.IsNullOrEmpty(column.Title) && !column.IsMasterCheckBox)
        {
            <text>
            title: '@JavaScriptEncoder.Default.Encode(column.Title)',
            </text>
        }
        else
        {
            if (!string.IsNullOrEmpty(column.Title) && column.IsMasterCheckBox)
            {
                <text>
                    title: '<div class="checkbox"><label><input id="mastercheckbox" type="checkbox" />@JavaScriptEncoder.Default.Encode(column.Title)</label></div>',
                </text>
            }
            else
            {
                if (string.IsNullOrEmpty(column.Title) && column.IsMasterCheckBox)
                {
                    <text>
                        title: '<input id="mastercheckbox" type="checkbox" />',
                    </text>
                }
            }
        }
        width: '@column.Width',
        visible: @column.Visible.ToString().ToLower(),
        searchable: @column.Searchable.ToString().ToLower(),
        @if (column.AutoWidth)
        {
            <text>
                autoWidth: @column.AutoWidth.ToString().ToLower(),
            </text>
        }
        @if (!string.IsNullOrEmpty(column.ClassName))
        {
            <text>
                className: '@column.ClassName',
            </text>
        }

        @switch (column.Render)
        {
            case RenderDate date:
                <text>
                    render: function (data, type, row, meta) {
                    return (data) ? moment(data).locale('@locale').format('@date.Format') : null;
                    },
                </text>
                break;
            case RenderButtonEdit buttonEdit:
                <text>
                    render: function (data, type, row, meta) {
                    return '<a class="@buttonEdit.ClassName" href="@GetUrl(buttonEdit.Url)' + data + '"><i class="fa fa-pencil"></i>Edit</a>';
                    },
                </text>
                break;
            case RenderButtonView buttonView:
                <text>
                    render: function (data, type, row, meta) {
                    return '<a class="@buttonView.ClassName" href="@GetUrl(buttonView.Url)' + data + '"><i class="fa fa-eye"></i>View</a>';
                    },
                </text>
                break;
            case RenderButtonCustom buttonCustom:
                if (!string.IsNullOrEmpty(buttonCustom.Url))
                {
                    <text>
                        render: function (data, type, row, meta) {
                        return '<a class="@buttonCustom.ClassName" href="@buttonCustom.Url' + data + '">@JavaScriptEncoder.Default.Encode(buttonCustom.Title)</a>';
                        },
                    </text>
                }
                if (!string.IsNullOrEmpty(buttonCustom.OnClickFunctionName))
                {
                    <text>
                        render: function (data, type, row, meta) {
                        return '<a class="@buttonCustom.ClassName" onclick="@buttonCustom.OnClickFunctionName' + '(' + data + ');">@JavaScriptEncoder.Default.Encode(buttonCustom.Title)</a>';
                        },
                    </text>
                }
                break;

            case RenderCheckBox checkBox:
                <text>
                    render: function (data, type, row, meta) {
                    return (data === 'true')
                    ? '<input name="@checkBox.Name" value="' + row.Id + '" type="checkbox" class="checkboxGroups" checked="checked" />'
                    : '<input name="@checkBox.Name" value="' + row.Id + '" type="checkbox" class="checkboxGroups" />';
                    },
                </text>
                break;

            case RenderCustom custom:
                <text>
                    render: function (data, type, row, meta) {
                    return @(custom.FunctionName)(data, type, row, meta);
                    },
                </text>
                break;

        }
        data: '@column.Data'
        }
        @if (i != Model.ColumnCollection.Count - 1)
        {<text>,</text>}
        </text>
    }
]
